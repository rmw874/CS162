[failure] Got stuck!
Application of non-lambda
in expression 0 (lambda x. lambda y. x)
in expression 
(0 (lambda x. lambda y. x)) (lambda x. lambda y. x)
in expression 
(lambda b. (b 1) 0) ((0 (lambda x. lambda y. x)) (lambda x. lambda y. x))
in expression 
let xor = let bonus = 0
          in let xor = bonus
             in xor
in (lambda b. (b 1) 0) ((0 (lambda x. lambda y. x)) (lambda x. lambda y. x))
in expression 
let imply = let bonus = 0
            in let imply = bonus
               in imply
in let xor = let bonus = 0
             in let xor = bonus
                in xor
   in (lambda b. (b 1) 0) ((0 (lambda x. lambda y. x)) (lambda x. lambda y. x))
in expression 
let or = let bonus = 0
         in let or = bonus
            in or
in let imply = let bonus = 0
               in let imply = bonus
                  in imply
   in let xor = let bonus = 0
                in let xor = bonus
                   in xor
      in (lambda b. (b 1) 0) ((0 (lambda x. lambda y. x)) (lambda x. 
                                                             lambda y. x))
in expression 
let and = let bonus = 0
          in let and = bonus
             in and
in let or = let bonus = 0
            in let or = bonus
               in or
   in let imply = let bonus = 0
                  in let imply = bonus
                     in imply
      in let xor = let bonus = 0
                   in let xor = bonus
                      in xor
         in (lambda b. (b 1) 0) ((and (lambda x. lambda y. x)) (lambda x. 
                                                                  lambda y. x))
in expression 
let bool_to_int = lambda b. (b 1) 0
in let and = let bonus = 0
             in let and = bonus
                in and
   in let or = let bonus = 0
               in let or = bonus
                  in or
      in let imply = let bonus = 0
                     in let imply = bonus
                        in imply
         in let xor = let bonus = 0
                      in let xor = bonus
                         in xor
            in bool_to_int ((and (lambda x. lambda y. x)) (lambda x. 
                                                             lambda y. x))
in expression 
let ff = lambda x. lambda y. y
in let bool_to_int = lambda b. (b 1) 0
   in let and = let bonus = 0
                in let and = bonus
                   in and
      in let or = let bonus = 0
                  in let or = bonus
                     in or
         in let imply = let bonus = 0
                        in let imply = bonus
                           in imply
            in let xor = let bonus = 0
                         in let xor = bonus
                            in xor
               in bool_to_int ((and (lambda x. lambda y. x)) (lambda x. 
                                                                lambda y. x))
in expression 
let tt = lambda x. lambda y. x
in let ff = lambda x. lambda y. y
   in let bool_to_int = lambda b. (b 1) 0
      in let and = let bonus = 0
                   in let and = bonus
                      in and
         in let or = let bonus = 0
                     in let or = bonus
                        in or
            in let imply = let bonus = 0
                           in let imply = bonus
                              in imply
               in let xor = let bonus = 0
                            in let xor = bonus
                               in xor
                  in bool_to_int ((and tt) tt)
          Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
          Called from Dune__exe__Test_lamp.test_eval in file "test/test_lamp.ml", line 52, characters 39-70
          Called from Alcotest_engine__Core.Make.protect_test.(fun) in file "src/alcotest-engine/core.ml", line 181, characters 17-23
          Called from Alcotest_engine__Monad.Identity.catch in file "src/alcotest-engine/monad.ml", line 24, characters 31-35
          