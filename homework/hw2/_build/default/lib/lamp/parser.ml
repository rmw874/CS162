type token =
  | EOF
  | FUN
  | REC
  | MATCH
  | BAR
  | END
  | GT
  | EQ
  | LT
  | LPAREN
  | RPAREN
  | DOT
  | COMMA
  | TRUE
  | FALSE
  | AND
  | OR
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | WITH
  | LAMBDA
  | NIL
  | CONS
  | TYINT
  | TYLIST
  | THINARROW
  | COLON
  | LBRACK
  | RBRACK
  | PLUS
  | SUB
  | TIMES
  | APP
  | NUMBER of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "lib/lamp/parser.mly"
open Ast
let mk_lambdas (xs : string list) (e : expr) =
  let f x e' = Lambda(Scope(x,e')) in
  List.fold_right f xs e

# 50 "lib/lamp/parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* FUN *);
  258 (* REC *);
  259 (* MATCH *);
  260 (* BAR *);
  261 (* END *);
  262 (* GT *);
  263 (* EQ *);
  264 (* LT *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* DOT *);
  268 (* COMMA *);
  269 (* TRUE *);
  270 (* FALSE *);
  271 (* AND *);
  272 (* OR *);
  273 (* LET *);
  274 (* IN *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* WITH *);
  279 (* LAMBDA *);
  280 (* NIL *);
  281 (* CONS *);
  282 (* TYINT *);
  283 (* TYLIST *);
  284 (* THINARROW *);
  285 (* COLON *);
  286 (* LBRACK *);
  287 (* RBRACK *);
  288 (* PLUS *);
  289 (* SUB *);
  290 (* TIMES *);
  291 (* APP *);
    0|]

let yytransl_block = [|
  292 (* NUMBER *);
  293 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\004\000\004\000\002\000\002\000\002\000\
\002\000\002\000\007\000\007\000\005\000\005\000\005\000\006\000\
\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\001\000\003\000\004\000\008\000\006\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\001\000\
\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\011\000\019\000\000\000\009\000\000\000\016\000\002\000\003\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\018\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000\020\000\021\000\012\000\013\000\014\000"

let yysindex = "\027\000\
\008\255\000\000\011\000\020\255\013\255\020\255\020\255\000\000\
\000\000\000\000\004\000\000\000\003\255\000\000\000\000\000\000\
\036\255\019\255\052\255\048\255\050\255\000\000\013\255\013\255\
\013\255\000\000\020\255\000\000\013\255\020\255\013\255\028\255\
\028\255\000\000\056\255\009\255\000\000\022\255\013\255\013\255\
\014\255\022\255\013\255\022\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\010\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\005\000\000\000\006\000"

let yygindex = "\000\000\
\000\000\251\255\017\000\242\255\000\000\245\255\000\000"

let yytablesize = 299
let yytable = "\018\000\
\010\000\026\000\006\000\022\000\008\000\007\000\013\000\003\000\
\004\000\014\000\015\000\005\000\035\000\004\000\026\000\037\000\
\005\000\032\000\033\000\034\000\017\000\005\000\019\000\036\000\
\006\000\038\000\040\000\001\000\028\000\006\000\007\000\043\000\
\004\000\041\000\042\000\007\000\004\000\044\000\008\000\009\000\
\023\000\024\000\025\000\008\000\009\000\023\000\024\000\025\000\
\008\000\009\000\023\000\024\000\025\000\023\000\024\000\025\000\
\016\000\027\000\029\000\030\000\031\000\025\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\006\000\000\000\008\000\007\000\
\013\000\000\000\010\000\014\000\006\000\000\000\008\000\007\000\
\013\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\010\000\010\000\010\000\023\000\024\000\025\000\013\000\013\000\
\000\000\014\000\014\000"

let yycheck = "\005\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\001\
\001\001\000\000\000\000\009\001\027\000\001\001\026\000\030\000\
\009\001\023\000\024\000\025\000\004\000\009\001\006\000\029\000\
\017\001\031\000\018\001\001\000\010\001\017\001\023\001\018\001\
\007\001\039\000\040\000\023\001\011\001\043\000\036\001\037\001\
\032\001\033\001\034\001\036\001\037\001\032\001\033\001\034\001\
\036\001\037\001\032\001\033\001\034\001\032\001\033\001\034\001\
\037\001\022\001\007\001\012\001\011\001\034\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001\255\255\010\001\255\255\010\001\010\001\
\010\001\255\255\018\001\010\001\018\001\255\255\018\001\018\001\
\018\001\255\255\255\255\018\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\032\001\033\001\034\001\032\001\033\001\
\255\255\032\001\033\001"

let yynames_const = "\
  EOF\000\
  FUN\000\
  REC\000\
  MATCH\000\
  BAR\000\
  END\000\
  GT\000\
  EQ\000\
  LT\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  COMMA\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WITH\000\
  LAMBDA\000\
  NIL\000\
  CONS\000\
  TYINT\000\
  TYLIST\000\
  THINARROW\000\
  COLON\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  SUB\000\
  TIMES\000\
  APP\000\
  "

let yynames_block = "\
  NUMBER\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 38 "lib/lamp/parser.mly"
               ( _1 )
# 267 "lib/lamp/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "lib/lamp/parser.mly"
                ( Err.syntax_error() )
# 273 "lib/lamp/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "lib/lamp/parser.mly"
         ( _1 )
# 280 "lib/lamp/parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 45 "lib/lamp/parser.mly"
                          ( [_1] )
# 287 "lib/lamp/parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bindlist) in
    Obj.repr(
# 46 "lib/lamp/parser.mly"
                          ( _1 :: _3 )
# 295 "lib/lamp/parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "lib/lamp/parser.mly"
                                             ( mk_lambdas _2 _4 )
# 303 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bindlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "lib/lamp/parser.mly"
                                             ( let x = _2 in Let(mk_lambdas _4 _6, Scope(x,_8)) )
# 313 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "lib/lamp/parser.mly"
                                             ( Let(_4, Scope(_2,_6)) )
# 322 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop) in
    Obj.repr(
# 57 "lib/lamp/parser.mly"
                                             ( _1 )
# 329 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 58 "lib/lamp/parser.mly"
                                             ( _1 )
# 336 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "lib/lamp/parser.mly"
                                          ( Var(_1) )
# 343 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 62 "lib/lamp/parser.mly"
                                          ( Num(_1) )
# 350 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "lib/lamp/parser.mly"
                                          ( Binop(Add, _1, _3) )
# 358 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "lib/lamp/parser.mly"
                                          ( Binop(Sub, _1, _3) )
# 366 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "lib/lamp/parser.mly"
                                           ( Binop(Mul, _1, _3) )
# 374 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 70 "lib/lamp/parser.mly"
                                          ( _1 )
# 381 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "lib/lamp/parser.mly"
                                          ( _2 )
# 388 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 72 "lib/lamp/parser.mly"
                                          ( App(_1, _2) )
# 396 "lib/lamp/parser.ml"
               : 'term))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
