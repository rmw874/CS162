type token =
  | EOF
  | FUN
  | REC
  | MATCH
  | BAR
  | END
  | GT
  | EQ
  | LT
  | LPAREN
  | RPAREN
  | DOT
  | COMMA
  | AT
  | FIX
  | IS
  | LBRACE
  | RBRACE
  | TRUE
  | FALSE
  | TYBOOL
  | FST
  | SND
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | WITH
  | LAMBDA
  | NIL
  | CONS
  | SEMI
  | SHARP
  | TYINT
  | TYLIST
  | THINARROW
  | COLON
  | LBRACK
  | RBRACK
  | CLET
  | CPRINT
  | CCLEAR
  | CLOAD
  | CSAVE
  | CPLUSMETA
  | CMINUSMETA
  | PLUS
  | SUB
  | TIMES
  | APP
  | NUMBER of (int)
  | ID of (string)
  | FILE of (string)

open Parsing;;
let _ = parse_error;;
# 2 "lib/lamp/parser.mly"
open Ast
let mk_lambdas (xs : (string * ty option) list) (e : expr) (r: ty option) =
  let f (x, topt) e' = Lambda(topt, Scope(x,e')) in
  List.fold_right f xs (match r with None -> e | Some r -> Annot(e, r))

let rec mk_tfun_of_list (xs: (string * ty option) list) (r: ty option) : ty option = 
    match r with 
    | Some r ->
        List.fold_right (fun (x,topt) fo -> 
            match topt, fo with
            | Some t, Some r -> Some (TFun(t,r))
            | _ -> None) xs (Some r)
    | None -> None
let mk_let (x: string) (ty: ty option) (e1: expr) (e2: expr) : expr = 
    match ty with
    | Some t -> Let(Annot(e1, t), Scope(x, e2))
    | None -> Let(e1, Scope(x, e2))
# 78 "lib/lamp/parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* FUN *);
  258 (* REC *);
  259 (* MATCH *);
  260 (* BAR *);
  261 (* END *);
  262 (* GT *);
  263 (* EQ *);
  264 (* LT *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* DOT *);
  268 (* COMMA *);
  269 (* AT *);
  270 (* FIX *);
  271 (* IS *);
  272 (* LBRACE *);
  273 (* RBRACE *);
  274 (* TRUE *);
  275 (* FALSE *);
  276 (* TYBOOL *);
  277 (* FST *);
  278 (* SND *);
  279 (* LET *);
  280 (* IN *);
  281 (* IF *);
  282 (* THEN *);
  283 (* ELSE *);
  284 (* WITH *);
  285 (* LAMBDA *);
  286 (* NIL *);
  287 (* CONS *);
  288 (* SEMI *);
  289 (* SHARP *);
  290 (* TYINT *);
  291 (* TYLIST *);
  292 (* THINARROW *);
  293 (* COLON *);
  294 (* LBRACK *);
  295 (* RBRACK *);
  296 (* CLET *);
  297 (* CPRINT *);
  298 (* CCLEAR *);
  299 (* CLOAD *);
  300 (* CSAVE *);
  301 (* CPLUSMETA *);
  302 (* CMINUSMETA *);
  303 (* PLUS *);
  304 (* SUB *);
  305 (* TIMES *);
  306 (* APP *);
    0|]

let yytransl_block = [|
  307 (* NUMBER *);
  308 (* ID *);
  309 (* FILE *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\007\000\007\000\003\000\003\000\001\000\001\000\008\000\008\000\
\008\000\009\000\009\000\004\000\004\000\004\000\005\000\005\000\
\010\000\010\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\014\000\014\000\
\015\000\015\000\015\000\015\000\015\000\016\000\016\000\017\000\
\018\000\012\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\011\000\011\000\011\000\011\000\000\000\000\000\000\000\
\000\000"

let yylen = "\002\000\
\004\000\001\000\001\000\002\000\002\000\001\000\001\000\001\000\
\000\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\003\000\004\000\001\000\003\000\003\000\001\000\003\000\001\000\
\001\000\003\000\004\000\009\000\008\000\004\000\006\000\006\000\
\002\000\002\000\001\000\001\000\003\000\001\000\003\000\000\000\
\001\000\001\000\001\000\001\000\002\000\000\000\001\000\003\000\
\005\000\008\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\002\000\005\000\002\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\041\000\062\000\000\000\000\000\
\035\000\036\000\058\000\000\000\002\000\003\000\000\000\000\000\
\006\000\007\000\063\000\000\000\000\000\000\000\064\000\000\000\
\000\000\016\000\015\000\000\000\065\000\019\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\005\000\012\000\010\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\020\000\021\000\000\000\023\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\026\000\000\000\039\000\
\000\000\018\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\005\000\
\022\000\038\000\039\000\045\000\060\000\036\000\040\000\046\000\
\047\000\061\000\024\000\025\000\026\000\063\000\027\000\113\000\
\126\000\140\000"

let yysindex = "\108\000\
\181\255\111\004\134\255\023\255\000\000\015\000\003\255\008\255\
\008\255\225\254\008\255\000\000\000\000\033\255\033\255\225\254\
\008\255\225\254\241\254\000\000\000\000\000\000\075\004\033\255\
\000\000\000\000\000\000\225\254\000\000\000\000\242\254\244\254\
\000\000\000\000\000\000\180\002\048\000\134\255\000\000\050\000\
\023\255\000\000\000\000\015\255\000\000\000\000\226\254\000\000\
\225\254\035\255\045\255\160\255\010\001\059\255\095\004\033\255\
\033\255\071\255\116\001\068\255\075\255\023\255\000\000\000\000\
\008\255\008\255\008\255\023\255\008\255\008\255\008\255\008\255\
\078\255\080\255\000\000\000\000\000\000\000\000\000\000\088\255\
\023\255\023\255\023\255\067\255\023\255\225\254\095\255\000\000\
\008\255\008\255\008\255\008\255\225\254\008\255\062\255\034\255\
\034\255\034\255\000\000\180\002\247\254\247\254\089\255\008\255\
\000\000\065\255\000\000\000\000\225\254\000\000\098\255\000\000\
\076\255\180\002\222\001\169\001\191\003\000\000\180\002\000\000\
\180\002\000\000\101\255\008\255\079\255\110\255\000\000\008\255\
\008\255\008\255\074\002\008\255\064\255\180\002\180\002\127\002\
\008\255\180\002\086\255\113\255\008\255\180\002\069\255\000\000\
\180\002\083\255\008\255\180\002"

let yyrindex = "\000\000\
\000\000\000\000\120\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\000\000\000\000\202\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\003\000\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\085\255\000\000\000\000\000\000\000\000\000\000\252\003\
\049\004\000\000\000\000\007\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\001\
\127\001\180\001\000\000\233\001\213\000\021\001\160\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\002\000\000\000\000\000\000\000\000\085\002\000\000\
\149\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\138\002\191\002\000\000\
\000\000\120\255\000\000\000\000\000\000\244\002\000\000\000\000\
\043\003\000\000\000\000\121\255"

let yygindex = "\000\000\
\000\000\123\000\092\000\250\255\018\000\255\255\000\000\000\000\
\000\000\183\255\244\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 1443
let yytable = "\023\000\
\022\000\056\000\057\000\068\000\049\000\082\000\052\000\053\000\
\007\000\055\000\008\000\073\000\111\000\025\000\048\000\059\000\
\009\000\025\000\083\000\118\000\050\000\010\000\062\000\011\000\
\051\000\012\000\013\000\054\000\014\000\015\000\016\000\041\000\
\017\000\058\000\080\000\123\000\018\000\019\000\075\000\072\000\
\076\000\009\000\042\000\073\000\073\000\074\000\068\000\077\000\
\011\000\079\000\012\000\013\000\081\000\040\000\050\000\095\000\
\043\000\044\000\020\000\021\000\073\000\099\000\019\000\096\000\
\097\000\098\000\084\000\100\000\101\000\102\000\103\000\085\000\
\086\000\089\000\106\000\107\000\108\000\091\000\110\000\093\000\
\070\000\071\000\072\000\020\000\021\000\094\000\104\000\114\000\
\115\000\116\000\117\000\024\000\119\000\011\000\109\000\024\000\
\024\000\105\000\112\000\024\000\120\000\068\000\121\000\122\000\
\124\000\125\000\060\000\130\000\001\000\002\000\003\000\004\000\
\024\000\133\000\132\000\139\000\143\000\144\000\147\000\009\000\
\146\000\046\000\131\000\048\000\035\000\049\000\134\000\135\000\
\136\000\078\000\138\000\000\000\000\000\037\000\007\000\142\000\
\008\000\000\000\000\000\145\000\000\000\000\000\009\000\000\000\
\000\000\148\000\000\000\010\000\000\000\011\000\000\000\012\000\
\013\000\000\000\014\000\015\000\016\000\000\000\017\000\053\000\
\000\000\000\000\018\000\019\000\000\000\065\000\066\000\067\000\
\000\000\000\000\000\000\000\000\068\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\006\000\007\000\000\000\008\000\
\020\000\021\000\000\000\087\000\000\000\009\000\069\000\000\000\
\000\000\000\000\010\000\000\000\011\000\000\000\012\000\013\000\
\000\000\014\000\015\000\016\000\000\000\017\000\070\000\071\000\
\072\000\018\000\019\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\022\000\000\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\052\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\000\000\000\000\022\000\022\000\040\000\040\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\055\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\040\000\040\000\060\000\060\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\060\000\060\000\
\060\000\000\000\000\000\060\000\060\000\060\000\056\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\060\000\060\000\053\000\
\053\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\053\000\000\000\053\000\000\000\053\000\
\053\000\053\000\053\000\054\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\053\000\053\000\051\000\051\000\000\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\051\000\000\000\051\000\000\000\051\000\051\000\051\000\051\000\
\057\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\000\000\051\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\000\000\088\000\052\000\052\000\068\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\030\000\
\052\000\000\000\052\000\000\000\052\000\052\000\052\000\052\000\
\069\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\000\000\000\000\052\000\
\052\000\055\000\055\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\027\000\055\000\000\000\055\000\
\000\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\000\000\065\000\066\000\067\000\055\000\055\000\056\000\056\000\
\068\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\031\000\056\000\000\000\056\000\092\000\056\000\056\000\
\056\000\056\000\069\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\065\000\066\000\
\067\000\056\000\056\000\054\000\054\000\068\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\032\000\054\000\
\128\000\054\000\000\000\054\000\054\000\054\000\054\000\069\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\065\000\066\000\067\000\054\000\054\000\
\057\000\057\000\068\000\057\000\057\000\057\000\127\000\000\000\
\000\000\057\000\057\000\029\000\057\000\000\000\057\000\000\000\
\057\000\057\000\057\000\057\000\069\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\000\000\000\000\057\000\057\000\000\000\000\000\030\000\
\030\000\000\000\030\000\030\000\030\000\000\000\000\000\000\000\
\030\000\030\000\028\000\030\000\000\000\030\000\000\000\030\000\
\030\000\030\000\030\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\065\000\
\066\000\067\000\030\000\030\000\027\000\027\000\068\000\027\000\
\027\000\027\000\000\000\000\000\000\000\027\000\027\000\008\000\
\027\000\137\000\027\000\000\000\027\000\027\000\027\000\027\000\
\069\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\000\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\065\000\066\000\067\000\027\000\
\027\000\031\000\031\000\068\000\031\000\031\000\031\000\000\000\
\000\000\000\000\031\000\031\000\001\000\031\000\141\000\031\000\
\000\000\031\000\031\000\031\000\031\000\069\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000\000\000\000\000\000\000\000\000\070\000\071\000\072\000\
\000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000\065\000\066\000\067\000\031\000\031\000\032\000\032\000\
\068\000\032\000\032\000\032\000\000\000\000\000\000\000\032\000\
\032\000\038\000\032\000\000\000\032\000\000\000\032\000\032\000\
\032\000\032\000\069\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\032\000\032\000\029\000\029\000\000\000\029\000\029\000\
\029\000\000\000\000\000\033\000\029\000\029\000\000\000\029\000\
\000\000\029\000\000\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\000\000\000\000\000\000\029\000\029\000\
\000\000\000\000\028\000\028\000\000\000\028\000\028\000\028\000\
\034\000\000\000\000\000\028\000\028\000\000\000\028\000\000\000\
\028\000\000\000\028\000\028\000\028\000\028\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\000\000\000\000\000\000\028\000\028\000\008\000\
\008\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\008\000\000\000\008\000\
\000\000\008\000\008\000\000\000\008\000\008\000\008\000\000\000\
\008\000\000\000\000\000\000\000\008\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\000\000\000\000\
\000\000\000\000\008\000\008\000\001\000\001\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\001\000\000\000\001\000\000\000\001\000\001\000\
\000\000\001\000\001\000\001\000\000\000\001\000\000\000\000\000\
\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\065\000\066\000\067\000\001\000\
\001\000\038\000\038\000\068\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\000\000\038\000\038\000\038\000\
\000\000\129\000\038\000\000\000\000\000\069\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\000\000\000\000\000\000\000\000\070\000\071\000\072\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\033\000\033\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\000\000\033\000\
\033\000\033\000\000\000\000\000\033\000\000\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\000\000\000\000\000\000\
\034\000\034\000\000\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000\034\000\000\000\034\000\034\000\034\000\000\000\
\000\000\034\000\000\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\034\000\
\065\000\066\000\067\000\000\000\000\000\000\000\000\000\068\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\000\000\065\000\066\000\067\000\000\000\
\000\000\069\000\090\000\068\000\000\000\000\000\000\000\007\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\070\000\071\000\072\000\010\000\069\000\011\000\000\000\
\012\000\013\000\000\000\014\000\015\000\016\000\000\000\017\000\
\000\000\000\000\000\000\018\000\019\000\070\000\071\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\000\000\000\000\
\000\000\020\000\021\000"

let yycheck = "\001\000\
\000\000\014\000\015\000\013\001\002\001\036\001\008\000\009\000\
\001\001\011\000\003\001\024\000\086\000\007\001\000\000\017\000\
\009\001\011\001\049\001\093\000\052\001\014\001\038\001\016\001\
\007\000\018\001\019\001\010\000\021\001\022\001\023\001\009\001\
\025\001\016\000\041\000\109\000\029\001\030\001\053\001\049\001\
\053\001\009\001\020\001\056\000\057\000\028\000\013\001\000\000\
\016\001\000\000\018\001\019\001\038\001\000\000\052\001\062\000\
\034\001\035\001\051\001\052\001\073\000\068\000\030\001\065\000\
\066\000\067\000\049\000\069\000\070\000\071\000\072\000\037\001\
\028\001\015\001\081\000\082\000\083\000\007\001\085\000\012\001\
\047\001\048\001\049\001\051\001\052\001\011\001\007\001\089\000\
\090\000\091\000\092\000\007\001\094\000\016\001\028\001\011\001\
\012\001\010\001\004\001\015\001\039\001\013\001\104\000\039\001\
\007\001\030\001\000\000\007\001\001\000\002\000\003\000\004\000\
\028\001\004\001\036\001\052\001\031\001\005\001\036\001\000\000\
\052\001\030\001\124\000\004\001\002\000\005\001\128\000\129\000\
\130\000\038\000\132\000\255\255\255\255\000\001\001\001\137\000\
\003\001\255\255\255\255\141\000\255\255\255\255\009\001\255\255\
\255\255\147\000\255\255\014\001\255\255\016\001\255\255\018\001\
\019\001\255\255\021\001\022\001\023\001\255\255\025\001\000\000\
\255\255\255\255\029\001\030\001\255\255\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\001\001\001\255\255\003\001\
\051\001\052\001\255\255\028\001\255\255\009\001\031\001\255\255\
\255\255\255\255\014\001\255\255\016\001\255\255\018\001\019\001\
\255\255\021\001\022\001\023\001\255\255\025\001\047\001\048\001\
\049\001\029\001\030\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\052\001\000\001\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\000\000\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\000\001\001\001\255\255\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\000\000\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\000\001\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\255\255\012\001\255\255\014\001\255\255\016\001\
\017\001\018\001\019\001\000\000\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\000\001\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\000\000\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\006\001\
\007\001\008\001\255\255\010\001\000\001\001\001\013\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\000\000\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\031\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\000\001\001\001\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\000\000\012\001\255\255\014\001\
\255\255\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\006\001\007\001\008\001\051\001\052\001\000\001\001\001\
\013\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\000\000\012\001\255\255\014\001\026\001\016\001\017\001\
\018\001\019\001\031\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\006\001\007\001\
\008\001\051\001\052\001\000\001\001\001\013\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\000\000\012\001\
\024\001\014\001\255\255\016\001\017\001\018\001\019\001\031\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\006\001\007\001\008\001\051\001\052\001\
\000\001\001\001\013\001\003\001\004\001\005\001\017\001\255\255\
\255\255\009\001\010\001\000\000\012\001\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\031\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\255\255\255\255\051\001\052\001\255\255\255\255\000\001\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\000\000\012\001\255\255\014\001\255\255\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\006\001\
\007\001\008\001\051\001\052\001\000\001\001\001\013\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\000\000\
\012\001\024\001\014\001\255\255\016\001\017\001\018\001\019\001\
\031\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\006\001\007\001\008\001\051\001\
\052\001\000\001\001\001\013\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\000\000\012\001\024\001\014\001\
\255\255\016\001\017\001\018\001\019\001\031\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\049\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\006\001\007\001\008\001\051\001\052\001\000\001\001\001\
\013\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\000\000\012\001\255\255\014\001\255\255\016\001\017\001\
\018\001\019\001\031\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\255\255\051\001\052\001\000\001\001\001\255\255\003\001\004\001\
\005\001\255\255\255\255\000\000\009\001\010\001\255\255\012\001\
\255\255\014\001\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\255\255\051\001\052\001\
\255\255\255\255\000\001\001\001\255\255\003\001\004\001\005\001\
\000\000\255\255\255\255\009\001\010\001\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\051\001\052\001\000\001\
\001\001\255\255\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\021\001\022\001\023\001\255\255\
\025\001\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\255\255\255\255\051\001\052\001\000\001\001\001\255\255\003\001\
\255\255\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\014\001\255\255\016\001\255\255\018\001\019\001\
\255\255\021\001\022\001\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\006\001\007\001\008\001\051\001\
\052\001\000\001\001\001\013\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\255\255\012\001\013\001\014\001\
\255\255\027\001\017\001\255\255\255\255\031\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\255\255\255\255\255\255\255\255\047\001\048\001\049\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\000\001\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\013\001\014\001\255\255\255\255\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\255\255\255\255\
\000\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\255\255\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\031\001\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\255\255\006\001\007\001\008\001\255\255\
\255\255\031\001\012\001\013\001\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\255\255\047\001\048\001\049\001\014\001\031\001\016\001\255\255\
\018\001\019\001\255\255\021\001\022\001\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\030\001\047\001\048\001\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\255\255\051\001\052\001"

let yynames_const = "\
  EOF\000\
  FUN\000\
  REC\000\
  MATCH\000\
  BAR\000\
  END\000\
  GT\000\
  EQ\000\
  LT\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  COMMA\000\
  AT\000\
  FIX\000\
  IS\000\
  LBRACE\000\
  RBRACE\000\
  TRUE\000\
  FALSE\000\
  TYBOOL\000\
  FST\000\
  SND\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WITH\000\
  LAMBDA\000\
  NIL\000\
  CONS\000\
  SEMI\000\
  SHARP\000\
  TYINT\000\
  TYLIST\000\
  THINARROW\000\
  COLON\000\
  LBRACK\000\
  RBRACK\000\
  CLET\000\
  CPRINT\000\
  CCLEAR\000\
  CLOAD\000\
  CSAVE\000\
  CPLUSMETA\000\
  CMINUSMETA\000\
  PLUS\000\
  SUB\000\
  TIMES\000\
  APP\000\
  "

let yynames_block = "\
  NUMBER\000\
  ID\000\
  FILE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "lib/lamp/parser.mly"
                        ( let (x,t) = _2 in Cmd.CLet(x,t,_4) )
# 669 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "lib/lamp/parser.mly"
              ( Cmd.CPrint)
# 675 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "lib/lamp/parser.mly"
             ( Cmd.CClear)
# 681 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "lib/lamp/parser.mly"
                 ( Cmd.CLoad _2 )
# 688 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "lib/lamp/parser.mly"
                 ( Cmd.CSave _2 )
# 695 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "lib/lamp/parser.mly"
                ( Cmd.CMeta )
# 701 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "lib/lamp/parser.mly"
                 ( Cmd.CExitMeta )
# 707 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "lib/lamp/parser.mly"
           (Cmd.CEval _1 )
# 714 "lib/lamp/parser.ml"
               : Cmd.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "lib/lamp/parser.mly"
      ( [] )
# 720 "lib/lamp/parser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cmd.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cmd.t list) in
    Obj.repr(
# 69 "lib/lamp/parser.mly"
                       ( _1 :: _2 )
# 728 "lib/lamp/parser.ml"
               : 'command_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command_list) in
    Obj.repr(
# 72 "lib/lamp/parser.mly"
                       ( _1 )
# 735 "lib/lamp/parser.ml"
               : Cmd.t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "lib/lamp/parser.mly"
                ( Err.syntax_error () )
# 741 "lib/lamp/parser.ml"
               : Cmd.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 76 "lib/lamp/parser.mly"
               ( _1 )
# 748 "lib/lamp/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "lib/lamp/parser.mly"
                ( Err.syntax_error () )
# 754 "lib/lamp/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "lib/lamp/parser.mly"
            ( TInt )
# 760 "lib/lamp/parser.ml"
               : 'ty_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "lib/lamp/parser.mly"
             ( TBool )
# 766 "lib/lamp/parser.ml"
               : 'ty_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ty) in
    Obj.repr(
# 82 "lib/lamp/parser.mly"
                         ( _2 )
# 773 "lib/lamp/parser.ml"
               : 'ty_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.ty) in
    Obj.repr(
# 85 "lib/lamp/parser.mly"
                              ( TList _3 )
# 780 "lib/lamp/parser.ml"
               : 'ty_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty_atom) in
    Obj.repr(
# 86 "lib/lamp/parser.mly"
              ( _1 )
# 787 "lib/lamp/parser.ml"
               : 'ty_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ty) in
    Obj.repr(
# 89 "lib/lamp/parser.mly"
                             ( TFun (_1, _3) )
# 795 "lib/lamp/parser.ml"
               : Ast.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ty) in
    Obj.repr(
# 90 "lib/lamp/parser.mly"
                         ( TProd (_1, _3) )
# 803 "lib/lamp/parser.ml"
               : Ast.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty_expr) in
    Obj.repr(
# 91 "lib/lamp/parser.mly"
              ( _1 )
# 810 "lib/lamp/parser.ml"
               : Ast.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ty) in
    Obj.repr(
# 94 "lib/lamp/parser.mly"
                  ( (_1, Some _3) )
# 818 "lib/lamp/parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "lib/lamp/parser.mly"
         ( (_1, None) )
# 825 "lib/lamp/parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 98 "lib/lamp/parser.mly"
            ( [_1] )
# 832 "lib/lamp/parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bindlist) in
    Obj.repr(
# 99 "lib/lamp/parser.mly"
                          ( _1 :: _3 )
# 840 "lib/lamp/parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "lib/lamp/parser.mly"
                                                    ( mk_lambdas _2 _4 None )
# 848 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'bind) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'bindlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "lib/lamp/parser.mly"
                                                    ( let (x,r) = _3 in 
                                                        let xs = _5 in
                                                        let e1 = _7 in
                                                        let e2 = _9 in
                                                        Let(Fix (mk_tfun_of_list xs r, Scope(x, mk_lambdas xs e1 r)), Scope(x, e2)) )
# 862 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bindlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "lib/lamp/parser.mly"
                                                    ( let (x,r) = _2 in 
                                                        let xs = _4 in
                                                        let e1 = _6 in
                                                        let e2 = _8 in
                                                        Let(mk_lambdas xs e1 r, Scope(x, e2)) )
# 876 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "lib/lamp/parser.mly"
                                                    ( let (x, topt) = _2 in Fix (topt, Scope(x, _4)) )
# 884 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "lib/lamp/parser.mly"
                                                    ( let (x, topt) = _2 in
                                                        let e1 = _4 in 
                                                        let e2 = _6 in
                                                        mk_let x topt e1 e2 )
# 896 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "lib/lamp/parser.mly"
                                               ( IfThenElse(_2, _4, _6) )
# 905 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 123 "lib/lamp/parser.mly"
                                           ( Fst _2 )
# 912 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 124 "lib/lamp/parser.mly"
                                           ( Snd _2 )
# 919 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_match) in
    Obj.repr(
# 125 "lib/lamp/parser.mly"
                                            ( _1 )
# 926 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop) in
    Obj.repr(
# 126 "lib/lamp/parser.mly"
                                             ( _1 )
# 933 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.ty) in
    Obj.repr(
# 127 "lib/lamp/parser.mly"
                                          ( Annot(_1, _3) )
# 941 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 128 "lib/lamp/parser.mly"
                                             ( _1 )
# 948 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.ty) in
    Obj.repr(
# 131 "lib/lamp/parser.mly"
                         ( Some _2 )
# 955 "lib/lamp/parser.ml"
               : 'tyarg_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "lib/lamp/parser.mly"
      ( None )
# 961 "lib/lamp/parser.ml"
               : 'tyarg_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 134 "lib/lamp/parser.mly"
                                          ( Var(_1) )
# 968 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 135 "lib/lamp/parser.mly"
                                          ( Num(_1) )
# 975 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "lib/lamp/parser.mly"
                                          ( True )
# 981 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "lib/lamp/parser.mly"
                                          ( False )
# 987 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tyarg_opt) in
    Obj.repr(
# 138 "lib/lamp/parser.mly"
                                          ( ListNil _2 )
# 994 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "lib/lamp/parser.mly"
      ( () )
# 1000 "lib/lamp/parser.ml"
               : 'bar_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "lib/lamp/parser.mly"
          ( () )
# 1006 "lib/lamp/parser.ml"
               : 'bar_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "lib/lamp/parser.mly"
                                          ( _3 )
# 1013 "lib/lamp/parser.ml"
               : 'nil_branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "lib/lamp/parser.mly"
                                          ( (_1, _3, _5) )
# 1022 "lib/lamp/parser.ml"
               : 'cons_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bar_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'nil_branch) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cons_branch) in
    Obj.repr(
# 152 "lib/lamp/parser.mly"
        ( 
            let (x,y,e3) = _7 in
            ListMatch(_2, _5, Scope(x, Scope(y, e3))))
# 1034 "lib/lamp/parser.ml"
               : 'list_match))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "lib/lamp/parser.mly"
                                          ( Binop(Add, _1, _3) )
# 1042 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "lib/lamp/parser.mly"
                                          ( Binop(Sub, _1, _3) )
# 1050 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "lib/lamp/parser.mly"
                                          ( Binop(Mul, _1, _3) )
# 1058 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "lib/lamp/parser.mly"
                                          ( Comp(Lt, _1, _3) )
# 1066 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "lib/lamp/parser.mly"
                                          ( Comp(Gt, _1, _3) )
# 1074 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "lib/lamp/parser.mly"
                                          ( Comp(Eq, _1, _3) )
# 1082 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "lib/lamp/parser.mly"
                                          ( ListCons(_1, _3) )
# 1090 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 166 "lib/lamp/parser.mly"
                                          ( _1 )
# 1097 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 167 "lib/lamp/parser.mly"
                                          ( _2 )
# 1104 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 168 "lib/lamp/parser.mly"
                                          ( App(_1, _2) )
# 1112 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 169 "lib/lamp/parser.mly"
                                          ( Pair(_2, _4) )
# 1120 "lib/lamp/parser.ml"
               : 'term))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry commands *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry ty *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cmd.t)
let commands (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Cmd.t list)
let ty (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Ast.ty)
