type token =
  | EOF
  | FUN
  | REC
  | MATCH
  | BAR
  | END
  | GT
  | EQ
  | LT
  | LPAREN
  | RPAREN
  | DOT
  | COMMA
  | SHARP
  | AT
  | FIX
  | IS
  | LBRACE
  | RBRACE
  | FST
  | SND
  | TRUE
  | FALSE
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | WITH
  | LAMBDA
  | NIL
  | CONS
  | TYINT
  | TYBOOL
  | TYLIST
  | THINARROW
  | COLON
  | LBRACK
  | RBRACK
  | PLUS
  | SUB
  | TIMES
  | APP
  | NUMBER of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "lib/lamp/parser.mly"
open Ast
let mk_lambdas (xs : string list) (e : expr) =
  let f x e' = Lambda(Scope(x,e')) in
  List.fold_right f xs e

# 57 "lib/lamp/parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* FUN *);
  258 (* REC *);
  259 (* MATCH *);
  260 (* BAR *);
  261 (* END *);
  262 (* GT *);
  263 (* EQ *);
  264 (* LT *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* DOT *);
  268 (* COMMA *);
  269 (* SHARP *);
  270 (* AT *);
  271 (* FIX *);
  272 (* IS *);
  273 (* LBRACE *);
  274 (* RBRACE *);
  275 (* FST *);
  276 (* SND *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* IF *);
  282 (* THEN *);
  283 (* ELSE *);
  284 (* WITH *);
  285 (* LAMBDA *);
  286 (* NIL *);
  287 (* CONS *);
  288 (* TYINT *);
  289 (* TYBOOL *);
  290 (* TYLIST *);
  291 (* THINARROW *);
  292 (* COLON *);
  293 (* LBRACK *);
  294 (* RBRACK *);
  295 (* PLUS *);
  296 (* SUB *);
  297 (* TIMES *);
  298 (* APP *);
    0|]

let yytransl_block = [|
  299 (* NUMBER *);
  300 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\005\000\005\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\009\000\009\000\009\000\009\000\009\000\010\000\010\000\
\011\000\012\000\007\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\006\000\006\000\006\000\006\000\000\000\000\000"

let yylen = "\002\000\
\005\000\002\000\002\000\001\000\001\000\003\000\004\000\004\000\
\008\000\009\000\006\000\006\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
\003\000\005\000\008\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\003\000\002\000\005\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\021\000\000\000\
\000\000\000\000\022\000\019\000\018\000\040\000\000\000\000\000\
\015\000\016\000\035\000\000\000\003\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\003\000\
\005\000\022\000\041\000\023\000\042\000\024\000\025\000\026\000\
\027\000\074\000\085\000\099\000"

let yysindex = "\020\000\
\245\254\011\255\000\000\236\254\000\000\005\000\007\255\091\255\
\091\255\227\254\091\255\053\255\053\255\000\000\000\000\227\254\
\091\255\227\254\000\000\000\000\000\000\000\000\125\000\053\255\
\000\000\000\000\000\000\227\254\000\000\227\254\000\000\252\254\
\116\255\120\255\009\255\131\255\053\255\053\255\020\255\142\255\
\017\255\024\255\000\000\091\255\091\255\091\255\091\255\091\255\
\091\255\091\255\035\255\030\255\025\255\227\254\056\255\000\000\
\091\255\091\255\091\255\091\255\227\254\091\255\234\254\234\254\
\234\254\187\255\026\255\026\255\000\000\091\255\227\254\058\255\
\000\000\036\255\187\255\146\255\168\255\183\255\000\000\187\255\
\187\255\061\255\091\255\037\255\067\255\000\000\091\255\091\255\
\091\255\172\255\091\255\029\255\187\255\187\255\209\255\091\255\
\187\255\045\255\073\255\091\255\187\255\040\255\000\000\187\255\
\044\255\091\255\187\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\118\000\000\000\000\000\
\249\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\051\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\237\000\012\001\
\043\001\071\001\163\000\200\000\000\000\000\000\000\000\000\000\
\000\000\000\000\096\001\000\000\000\000\000\000\000\000\127\001\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\138\001\163\001\000\000\000\000\
\085\255\000\000\000\000\000\000\174\001\000\000\000\000\199\001\
\000\000\000\000\086\255"

let yygindex = "\000\000\
\000\000\000\000\225\000\255\255\208\255\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yytablesize = 739
let yytable = "\005\000\
\037\000\004\000\028\000\005\000\029\000\072\000\033\000\034\000\
\030\000\036\000\006\000\007\000\079\000\008\000\031\000\040\000\
\048\000\049\000\050\000\009\000\001\000\002\000\082\000\054\000\
\057\000\010\000\059\000\011\000\061\000\012\000\013\000\014\000\
\015\000\016\000\062\000\017\000\070\000\037\000\038\000\018\000\
\019\000\017\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\051\000\031\000\011\000\071\000\020\000\021\000\075\000\
\076\000\077\000\078\000\073\000\080\000\009\000\051\000\051\000\
\083\000\084\000\050\000\089\000\081\000\011\000\092\000\091\000\
\098\000\014\000\015\000\102\000\051\000\103\000\106\000\013\000\
\023\000\090\000\019\000\105\000\001\000\093\000\094\000\095\000\
\025\000\097\000\026\000\007\000\000\000\008\000\101\000\020\000\
\021\000\000\000\104\000\009\000\000\000\000\000\000\000\000\000\
\107\000\010\000\000\000\011\000\000\000\012\000\013\000\014\000\
\015\000\016\000\000\000\017\000\000\000\014\000\000\000\018\000\
\019\000\044\000\045\000\046\000\043\000\044\000\045\000\046\000\
\000\000\056\000\000\000\000\000\000\000\020\000\021\000\000\000\
\044\000\045\000\046\000\000\000\000\000\000\000\058\000\055\000\
\000\000\000\000\047\000\044\000\045\000\046\000\047\000\044\000\
\045\000\046\000\048\000\049\000\050\000\000\000\048\000\049\000\
\050\000\047\000\028\000\086\000\000\000\000\000\000\000\060\000\
\000\000\048\000\049\000\050\000\047\000\044\000\045\000\046\000\
\047\000\044\000\045\000\046\000\048\000\049\000\050\000\000\000\
\048\000\049\000\050\000\000\000\044\000\045\000\046\000\087\000\
\044\000\045\000\046\000\096\000\000\000\000\000\047\000\029\000\
\000\000\000\000\047\000\000\000\000\000\000\000\048\000\049\000\
\050\000\088\000\048\000\049\000\050\000\047\000\044\000\045\000\
\046\000\047\000\000\000\000\000\000\000\048\000\049\000\050\000\
\000\000\048\000\049\000\050\000\000\000\000\000\000\000\032\000\
\100\000\000\000\035\000\000\000\032\000\000\000\000\000\047\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\050\000\000\000\000\000\052\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\033\000\037\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\037\000\037\000\000\000\
\037\000\000\000\037\000\037\000\037\000\000\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\037\000\037\000\031\000\037\000\037\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\017\000\017\000\017\000\034\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\017\000\017\000\013\000\013\000\013\000\013\000\013\000\
\000\000\013\000\000\000\013\000\000\000\000\000\000\000\008\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\013\000\013\000\013\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\013\000\014\000\014\000\014\000\014\000\014\000\007\000\014\000\
\000\000\014\000\044\000\045\000\046\000\000\000\000\000\014\000\
\000\000\011\000\000\000\000\000\000\000\014\000\000\000\014\000\
\014\000\014\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\014\000\014\000\014\000\000\000\
\000\000\000\000\012\000\048\000\049\000\050\000\028\000\028\000\
\028\000\028\000\028\000\000\000\028\000\009\000\028\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\028\000\028\000\028\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\028\000\028\000\029\000\029\000\029\000\029\000\029\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\029\000\029\000\029\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\029\000\
\032\000\032\000\032\000\032\000\032\000\000\000\032\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\032\000\032\000\
\032\000\000\000\000\000\032\000\000\000\000\000\000\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\033\000\033\000\033\000\
\000\000\000\000\033\000\000\000\000\000\000\000\031\000\031\000\
\031\000\031\000\031\000\000\000\031\000\000\000\031\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\031\000\031\000\031\000\000\000\
\000\000\031\000\034\000\034\000\000\000\000\000\000\000\000\000\
\034\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\034\000\034\000\034\000\008\000\008\000\000\000\000\000\000\000\
\000\000\008\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\000\000\000\000\
\007\000\000\000\007\000\000\000\000\000\011\000\011\000\000\000\
\007\000\000\000\000\000\011\000\000\000\011\000\007\000\000\000\
\007\000\007\000\007\000\011\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\011\000\011\000\011\000\012\000\012\000\
\000\000\000\000\000\000\000\000\012\000\000\000\012\000\000\000\
\000\000\009\000\009\000\000\000\012\000\000\000\000\000\009\000\
\000\000\009\000\012\000\000\000\012\000\012\000\012\000\009\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\009\000\
\009\000\009\000\010\000\010\000\000\000\000\000\000\000\000\000\
\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\010\000\010\000\010\000"

let yycheck = "\007\001\
\000\000\013\001\023\001\011\001\000\000\054\000\008\000\009\000\
\002\001\011\000\000\001\001\001\061\000\003\001\044\001\017\000\
\039\001\040\001\041\001\009\001\001\000\002\000\071\000\028\001\
\016\001\015\001\007\001\017\001\012\001\019\001\020\001\021\001\
\022\001\023\001\011\001\025\001\007\001\012\000\013\000\029\001\
\030\001\000\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\024\000\044\001\017\001\028\001\043\001\044\001\057\000\
\058\000\059\000\060\000\004\001\062\000\009\001\037\000\038\000\
\007\001\030\001\041\001\007\001\070\000\017\001\004\001\035\001\
\044\001\021\001\022\001\031\001\051\000\005\001\035\001\000\000\
\030\001\083\000\030\001\044\001\000\000\087\000\088\000\089\000\
\004\001\091\000\005\001\001\001\255\255\003\001\096\000\043\001\
\044\001\255\255\100\000\009\001\255\255\255\255\255\255\255\255\
\106\000\015\001\255\255\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\255\255\000\000\255\255\029\001\
\030\001\006\001\007\001\008\001\000\000\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\043\001\044\001\255\255\
\006\001\007\001\008\001\255\255\255\255\255\255\012\001\028\001\
\255\255\255\255\031\001\006\001\007\001\008\001\031\001\006\001\
\007\001\008\001\039\001\040\001\041\001\255\255\039\001\040\001\
\041\001\031\001\000\000\018\001\255\255\255\255\255\255\026\001\
\255\255\039\001\040\001\041\001\031\001\006\001\007\001\008\001\
\031\001\006\001\007\001\008\001\039\001\040\001\041\001\255\255\
\039\001\040\001\041\001\255\255\006\001\007\001\008\001\024\001\
\006\001\007\001\008\001\024\001\255\255\255\255\031\001\000\000\
\255\255\255\255\031\001\255\255\255\255\255\255\039\001\040\001\
\041\001\027\001\039\001\040\001\041\001\031\001\006\001\007\001\
\008\001\031\001\255\255\255\255\255\255\039\001\040\001\041\001\
\255\255\039\001\040\001\041\001\255\255\255\255\255\255\007\000\
\024\001\255\255\010\000\255\255\000\000\255\255\255\255\031\001\
\016\000\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\028\000\255\255\030\000\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\000\000\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\255\255\
\024\001\255\255\026\001\027\001\028\001\255\255\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\000\000\043\001\044\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\026\001\027\001\028\001\000\000\255\255\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\012\001\255\255\255\255\255\255\000\000\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\039\001\040\001\
\041\001\004\001\005\001\006\001\007\001\008\001\000\000\010\001\
\255\255\012\001\006\001\007\001\008\001\255\255\255\255\018\001\
\255\255\000\000\255\255\255\255\255\255\024\001\255\255\026\001\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\039\001\040\001\041\001\255\255\
\255\255\255\255\000\000\039\001\040\001\041\001\004\001\005\001\
\006\001\007\001\008\001\255\255\010\001\000\000\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\027\001\028\001\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\039\001\040\001\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\039\001\040\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\027\001\
\028\001\255\255\255\255\031\001\255\255\255\255\255\255\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\026\001\027\001\028\001\
\255\255\255\255\031\001\255\255\255\255\255\255\004\001\005\001\
\006\001\007\001\008\001\255\255\010\001\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\027\001\028\001\255\255\
\255\255\031\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\027\001\028\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\012\001\255\255\255\255\004\001\005\001\255\255\
\018\001\255\255\255\255\010\001\255\255\012\001\024\001\255\255\
\026\001\027\001\028\001\018\001\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\026\001\027\001\028\001\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\012\001\255\255\
\255\255\004\001\005\001\255\255\018\001\255\255\255\255\010\001\
\255\255\012\001\024\001\255\255\026\001\027\001\028\001\018\001\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\027\001\028\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\027\001\028\001"

let yynames_const = "\
  EOF\000\
  FUN\000\
  REC\000\
  MATCH\000\
  BAR\000\
  END\000\
  GT\000\
  EQ\000\
  LT\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  COMMA\000\
  SHARP\000\
  AT\000\
  FIX\000\
  IS\000\
  LBRACE\000\
  RBRACE\000\
  FST\000\
  SND\000\
  TRUE\000\
  FALSE\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WITH\000\
  LAMBDA\000\
  NIL\000\
  CONS\000\
  TYINT\000\
  TYBOOL\000\
  TYLIST\000\
  THINARROW\000\
  COLON\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  SUB\000\
  TIMES\000\
  APP\000\
  "

let yynames_block = "\
  NUMBER\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "lib/lamp/parser.mly"
                             ( (_3,_5) )
# 429 "lib/lamp/parser.ml"
               : (string * Ast.expr)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 46 "lib/lamp/parser.mly"
               ( _1 )
# 436 "lib/lamp/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "lib/lamp/parser.mly"
                ( Err.syntax_error() )
# 442 "lib/lamp/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 50 "lib/lamp/parser.mly"
         ( _1 )
# 449 "lib/lamp/parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 53 "lib/lamp/parser.mly"
                          ( [_1] )
# 456 "lib/lamp/parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bindlist) in
    Obj.repr(
# 54 "lib/lamp/parser.mly"
                          ( _1 :: _3 )
# 464 "lib/lamp/parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "lib/lamp/parser.mly"
                                             ( mk_lambdas _2 _4 )
# 472 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "lib/lamp/parser.mly"
                                             ( Fix(Scope(_2, _4)) )
# 480 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bindlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "lib/lamp/parser.mly"
                                             ( let f = _2 in Let(mk_lambdas _4 _6, Scope(f,_8)) )
# 490 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'bind) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'bindlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "lib/lamp/parser.mly"
                                                 ( let f = _3 in Let(Fix(Scope(f, mk_lambdas _5 _7)), Scope(f,_9)) )
# 500 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "lib/lamp/parser.mly"
                                             ( Let(_4, Scope(_2,_6)) )
# 509 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "lib/lamp/parser.mly"
                                             ( IfThenElse(_2, _4, _6) )
# 518 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 68 "lib/lamp/parser.mly"
                                             ( Fst _2 )
# 525 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 69 "lib/lamp/parser.mly"
                                             ( Snd _2 )
# 532 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_match) in
    Obj.repr(
# 70 "lib/lamp/parser.mly"
                                             ( _1 )
# 539 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop) in
    Obj.repr(
# 71 "lib/lamp/parser.mly"
                                             ( _1 )
# 546 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 72 "lib/lamp/parser.mly"
                                             ( _1 )
# 553 "lib/lamp/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "lib/lamp/parser.mly"
                                          ( Var(_1) )
# 560 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "lib/lamp/parser.mly"
                                          ( Num(_1) )
# 567 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "lib/lamp/parser.mly"
                                          ( True )
# 573 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "lib/lamp/parser.mly"
                                          ( False )
# 579 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "lib/lamp/parser.mly"
                                          ( ListNil )
# 585 "lib/lamp/parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "lib/lamp/parser.mly"
      ( () )
# 591 "lib/lamp/parser.ml"
               : 'bar_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "lib/lamp/parser.mly"
          ( () )
# 597 "lib/lamp/parser.ml"
               : 'bar_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "lib/lamp/parser.mly"
                                          ( _3 )
# 604 "lib/lamp/parser.ml"
               : 'nil_branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "lib/lamp/parser.mly"
                                          ( (_1, _3, _5) )
# 613 "lib/lamp/parser.ml"
               : 'cons_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bar_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'nil_branch) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cons_branch) in
    Obj.repr(
# 93 "lib/lamp/parser.mly"
        ( 
            let (x,y,e3) = _7 in
            ListMatch(_2, _5, Scope(x, Scope(y, e3))))
# 625 "lib/lamp/parser.ml"
               : 'list_match))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "lib/lamp/parser.mly"
                                          ( Binop(Add, _1, _3) )
# 633 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "lib/lamp/parser.mly"
                                          ( Binop(Sub, _1, _3) )
# 641 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "lib/lamp/parser.mly"
                                          ( Binop(Mul, _1, _3) )
# 649 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "lib/lamp/parser.mly"
                                          ( Comp(Lt, _1, _3) )
# 657 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "lib/lamp/parser.mly"
                                          ( Comp(Gt, _1, _3) )
# 665 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "lib/lamp/parser.mly"
                                          ( Comp(Eq, _1, _3) )
# 673 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "lib/lamp/parser.mly"
                                          ( ListCons(_1, _3) )
# 681 "lib/lamp/parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 107 "lib/lamp/parser.mly"
                                          ( _1 )
# 688 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "lib/lamp/parser.mly"
                                          ( _2 )
# 695 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 109 "lib/lamp/parser.mly"
                                          ( App(_1, _2) )
# 703 "lib/lamp/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "lib/lamp/parser.mly"
                                          ( Pair(_2, _4) )
# 711 "lib/lamp/parser.ml"
               : 'term))
(* Entry letbind *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let letbind (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (string * Ast.expr))
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ast.expr)
